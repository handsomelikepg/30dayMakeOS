     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式	
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 3制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 文件名
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL  _write_mem8
    14 00000000                                 
    15                                          [SECTION .text]
    16 00000000                                 
    17 00000000                                 _write_mem8: ; void write_mem8(int addr, int data);
    18 00000000 8B 4C 24 04                     		MOV ECX,[ESP+4] ; [ESP + 4]中存放的是地址，将其读入ECX
    19 00000004 8A 44 24 08                     		MOV AL,[ESP+8] ; [ESP + 8]中存放的是数据，将其读入AL
    20 00000008 88 01                           		MOV [ECX],AL
    21 0000000A C3                              		RET
    22 0000000B                                 
    23 0000000B                                 _io_hlt:	; void io_hlt(void);
    24 0000000B F4                              		HLT
    25 0000000C C3                              		RET
    26 0000000D                                 
    27 0000000D                                 _io_cli:	; void io_cli(void);
    28 0000000D FA                              		CLI
    29 0000000E C3                              		RET
    30 0000000F                                 
    31 0000000F                                 _io_sti:	; void io_sti(void);
    32 0000000F FB                              		STI
    33 00000010 C3                              		RET
    34 00000011                                 
    35 00000011                                 _io_stihlt:	; void io_stihlt(void);
    36 00000011 FB                              		STI
    37 00000012 F4                              		HLT
    38 00000013 C3                              		RET
    39 00000014                                 
    40 00000014                                 _io_in8:	; int io_in8(int port);
    41 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    42 00000018 B8 00000000                     		MOV		EAX,0
    43 0000001D EC                              		IN		AL,DX
    44 0000001E C3                              		RET
    45 0000001F                                 
    46 0000001F                                 _io_in16:	; int io_in16(int port);
    47 0000001F 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    48 00000023 B8 00000000                     		MOV		EAX,0
    49 00000028 66 ED                           		IN		AX,DX
    50 0000002A C3                              		RET
    51 0000002B                                 
    52 0000002B                                 _io_in32:	; int io_in32(int port);
    53 0000002B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    54 0000002F ED                              		IN		EAX,DX
    55 00000030 C3                              		RET
    56 00000031                                 
    57 00000031                                 _io_out8:	; void io_out8(int port, int data);
    58 00000031 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 00000035 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    60 00000039 EE                              		OUT		DX,AL
    61 0000003A C3                              		RET
    62 0000003B                                 
    63 0000003B                                 _io_out16:	; void io_out16(int port, int data);
    64 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    65 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    66 00000043 66 EF                           		OUT		DX,AX
    67 00000045 C3                              		RET
    68 00000046                                 
    69 00000046                                 
    70 00000046                                 _io_out32:	; void io_out32(int port, int data);
    71 00000046 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    72 0000004A 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    73 0000004E EF                              		OUT		DX,EAX
    74 0000004F C3                              		RET
    75 00000050                                 		
    76 00000050                                 ; 读取最初的eflags值
    77 00000050                                 _io_load_eflags:	; int io_load_eflags(void);
    78 00000050 9C                              		PUSHFD		; PUSH EFLAGS 
    79 00000051 58                              		POP		EAX
    80 00000052 C3                              		RET
    81 00000053                                 		
    82 00000053                                 ; 恢复最初的eflags值
    83 00000053                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    84 00000053 8B 44 24 04                     		MOV		EAX,[ESP+4]
    85 00000057 50                              		PUSH	EAX
    86 00000058 9D                              		POPFD		; POP EFLAGS 
    87 00000059 C3                              		RET
    88 0000005A                                 
