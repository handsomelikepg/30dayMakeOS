     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00280000                              BOTPAK	EQU		0x00280000		; 加载bootpack
     5  = 00100000                              DSKCAC	EQU		0x00100000		; 磁盘缓存的位置
     6  = 00008000                              DSKCAC0	EQU		0x00008000		; 磁盘缓存的位置（实模式）
     7 00000000                                 
     8 00000000                                 ; BOOT_INFO相关
     9  = 00000FF0                              CYLS	EQU		0x0ff0			; 引导扇区设置
    10  = 00000FF1                              LEDS	EQU		0x0ff1
    11  = 00000FF2                              VMODE	EQU		0x0ff2			; 关于颜色的信息
    12  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率X
    13  = 00000FF6                              SCRNY	EQU		0x0ff6			; 分辨率Y
    14  = 00000FF8                              VRAM	EQU		0x0ff8			; 图像缓冲区的起始地址
    15 00000000                                 
    16                                          		ORG		0xc200			;  这个的程序要被装载的内存地址
    17 0000C200                                 
    18 0000C200                                 ; 画面モードを設定
    19 0000C200                                 
    20 0000C200 B0 13                           		MOV		AL,0x13			; VGA显卡，320x200x8bit
    21 0000C202 B4 00                           		MOV		AH,0x00
    22 0000C204 CD 10                           		INT		0x10
    23 0000C206 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 屏幕的模式（参考C语言的引用）
    24 0000C20B C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    25 0000C211 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    26 0000C217 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    27 0000C220                                 ;为画面设置颜色		
    28 0000C220                                 		; DS = 0xa000 , SI = 0, DS:SI = 0xa0000  DS是寄存器地址，物理地址 = (段寄存器值 × 16) + 偏移地址  ---- 我们现在的偏移地址是0
    29 0000C220 8C DB                           		MOV		BX,DS		; 保存原来的DS
    30 0000C222 B8 A000                         		MOV		AX,0xa000
    31 0000C225 8E D8                           		MOV 	DS,AX
    32 0000C227 BE 0000                         		MOV		SI,0
    33 0000C22A                                 		
    34 0000C22A                                 draw:	
    35 0000C22A C6 04 0A                        		MOV		[SI],BYTE 10	
    36 0000C22D 83 C6 01                        		ADD		SI,1
    37 0000C230 81 FE 7D00                      		CMP		SI,320*100	
    38 0000C234 76 F4                           		JBE		draw		;JBE SI是小于等于320*100 就跳入这个循环执行，直到不满足
    39 0000C236                                 		
    40 0000C236                                 draw1:		
    41 0000C236 C6 04 0F                        		MOV		[SI],BYTE 15
    42 0000C239 83 C6 01                        		ADD		SI,1
    43 0000C23C 81 FE FA00                      		CMP		SI,320*200	
    44 0000C240 76 F4                           		JBE		draw1		;JBE SI是小于等于320*200 就跳入这个循环执行，直到不满足
    45 0000C242                                 		
    46 0000C242                                 		
    47 0000C242 8E DB                           		MOV		DS,BX
    48 0000C244                                 		
    49 0000C244                                 
    50 0000C244                                 ; 通过BIOS获取指示灯状态
    51 0000C244                                 
    52 0000C244 B4 02                           		MOV		AH,0x02
    53 0000C246 CD 16                           		INT		0x16 			; keyboard BIOS
    54 0000C248 A2 0FF1                         		MOV		[LEDS],AL
    55 0000C24B                                 
    56 0000C24B                                 ; 防止PIC接受所有中断
    57 0000C24B                                 ;	AT兼容机的规范、PIC初始化
    58 0000C24B                                 ;	然后之前在CLI不做任何事就挂起
    59 0000C24B                                 ;	PIC在同意后初始化
    60 0000C24B                                 
    61 0000C24B B0 FF                           		MOV		AL,0xff
    62 0000C24D E6 21                           		OUT		0x21,AL
    63 0000C24F 90                              		NOP						; 不断执行OUT指令
    64 0000C250 E6 A1                           		OUT		0xa1,AL
    65 0000C252                                 
    66 0000C252 FA                              		CLI						; 进一步中断CPU
    67 0000C253                                 
    68 0000C253                                 ; 让CPU支持1M以上内存、设置A20GATE
    69 0000C253                                 
    70 0000C253 E8 00B5                         		CALL	waitkbdout
    71 0000C256 B0 D1                           		MOV		AL,0xd1
    72 0000C258 E6 64                           		OUT		0x64,AL
    73 0000C25A E8 00AE                         		CALL	waitkbdout
    74 0000C25D B0 DF                           		MOV		AL,0xdf			; enable A20
    75 0000C25F E6 60                           		OUT		0x60,AL
    76 0000C261 E8 00A7                         		CALL	waitkbdout
    77 0000C264                                 
    78 0000C264                                 ; 保护模式转换
    79 0000C264                                 
    80 0000C264                                 [INSTRSET "i486p"]				; 说明使用486指令
    81 0000C264                                 
    82 0000C264 0F 01 16 C34A                   		LGDT	[GDTR0]			; 设置临时GDT
    83 0000C269 0F 20 C0                        		MOV		EAX,CR0
    84 0000C26C 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 使用bit31（禁用分页）
    85 0000C272 66 83 C8 01                     		OR		EAX,0x00000001	; bit0到1转换（保护模式过渡）
    86 0000C276 0F 22 C0                        		MOV		CR0,EAX
    87 0000C279 EB 00                           		JMP		pipelineflush
    88 0000C27B                                 pipelineflush:
    89 0000C27B B8 0008                         		MOV		AX,1*8			;  写32bit的段
    90 0000C27E 8E D8                           		MOV		DS,AX
    91 0000C280 8E C0                           		MOV		ES,AX
    92 0000C282 8E E0                           		MOV		FS,AX
    93 0000C284 8E E8                           		MOV		GS,AX
    94 0000C286 8E D0                           		MOV		SS,AX
    95 0000C288                                 
    96 0000C288                                 ; bootpack传递
    97 0000C288                                 
    98 0000C288 66 BE 0000C350                  		MOV		ESI,bootpack	; 源
    99 0000C28E 66 BF 00280000                  		MOV		EDI,BOTPAK		; 目标
   100 0000C294 66 B9 00020000                  		MOV		ECX,512*1024/4
   101 0000C29A E8 0075                         		CALL	memcpy
   102 0000C29D                                 
   103 0000C29D                                 ; 传输磁盘数据
   104 0000C29D                                 
   105 0000C29D                                 ; 从引导区开始
   106 0000C29D                                 
   107 0000C29D 66 BE 00007C00                  		MOV		ESI,0x7c00		; 源
   108 0000C2A3 66 BF 00100000                  		MOV		EDI,DSKCAC		; 目标
   109 0000C2A9 66 B9 00000080                  		MOV		ECX,512/4
   110 0000C2AF E8 0060                         		CALL	memcpy
   111 0000C2B2                                 
   112 0000C2B2                                 ; 剩余的全部
   113 0000C2B2                                 
   114 0000C2B2 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 源
   115 0000C2B8 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 目标
   116 0000C2BE 66 B9 00000000                  		MOV		ECX,0
   117 0000C2C4 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   118 0000C2C8 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 除以4得到字节数
   119 0000C2CF 66 81 E9 00000080               		SUB		ECX,512/4		; IPL偏移量
   120 0000C2D6 E8 0039                         		CALL	memcpy
   121 0000C2D9                                 
   122 0000C2D9                                 ; 由于还需要asmhead才能完成
   123 0000C2D9                                 ; 完成其余的bootpack任务
   124 0000C2D9                                 
   125 0000C2D9                                 ; bootpack启动
   126 0000C2D9                                 
   127 0000C2D9 66 BB 00280000                  		MOV		EBX,BOTPAK
   128 0000C2DF 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   129 0000C2E4 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   130 0000C2E8 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   131 0000C2EC 74 10                           		JZ		skip			; 传输完成
   132 0000C2EE 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 源
   133 0000C2F3 66 01 DE                        		ADD		ESI,EBX
   134 0000C2F6 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 目标
   135 0000C2FB E8 0014                         		CALL	memcpy
   136 0000C2FE                                 skip:
   137 0000C2FE 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 堆栈的初始化
   138 0000C303 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   139 0000C30B                                 
   140 0000C30B                                 waitkbdout:
   141 0000C30B E4 64                           		IN		 AL,0x64
   142 0000C30D 24 02                           		AND		 AL,0x02
   143 0000C30F 75 FA                           		JNZ		waitkbdout		; AND结果不为0跳转到waitkbdout
   144 0000C311 C3                              		RET
   145 0000C312                                 
   146 0000C312                                 memcpy:
   147 0000C312 67 66 8B 06                     		MOV		EAX,[ESI]
   148 0000C316 66 83 C6 04                     		ADD		ESI,4
   149 0000C31A 67 66 89 07                     		MOV		[EDI],EAX
   150 0000C31E 66 83 C7 04                     		ADD		EDI,4
   151 0000C322 66 83 E9 01                     		SUB		ECX,1
   152 0000C326 75 EA                           		JNZ		memcpy			; 运算结果不为0跳转到memcpy
   153 0000C328 C3                              		RET
   154 0000C329                                 ; memcpy地址前缀大小
   155 0000C329                                 
   156 0000C329 00 00 00 00 00 00 00            		ALIGNB	16
   157 0000C330                                 GDT0:
   158 0000C330 00 00 00 00 00 00 00 00         		RESB	8				; 初始值
   159 0000C338 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 写32bit位段寄存器
   160 0000C340 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可执行的文件的32bit寄存器（bootpack用）
   161 0000C348                                 
   162 0000C348 0000                            		DW		0
   163 0000C34A                                 GDTR0:
   164 0000C34A 0017                            		DW		8*3-1
   165 0000C34C 0000C330                        		DD		GDT0
   166 0000C350                                 
   167 0000C350                                 		ALIGNB	16
   168 0000C350                                 bootpack:
